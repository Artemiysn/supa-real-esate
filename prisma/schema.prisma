// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Posts         Posts[]
  FavouredPosts FavouredPosts[]
  SentMessages Messages[] @relation("SentMessages")
  ReceivedMessages Messages[] @relation("ReceivedMessages")

  @@index([name])
}

enum PostType {
  rent
  sell
}

enum PropertyType {
  apartment
  house
}

model Posts {
  id            BigInt          @id @default(autoincrement())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  title         String          @db.VarChar(255)
  price         Int
  address       String          @db.VarChar(255)
  description   String          @db.VarChar(1000)
  type          PostType
  property      PropertyType
  city          String          @db.VarChar(255)
  area          Int
  kitchen       Int
  floor         Int
  year          Int
  FavouredPosts FavouredPosts[]
  lat           Decimal?        @db.Decimal(11, 8)
  lon           Decimal?        @db.Decimal(11, 8)

  @@index([city])
  @@index([area])
  @@index([price])
}

model FavouredPosts {
  id     String @id @default(cuid())
  userId String
  postId BigInt
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post   Posts  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model Messages {
  id String @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  authorId String 
  author     User    @relation("SentMessages", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverId String
  receiver     User    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content String @db.Text
  watched Boolean @default(false)
  hidden Boolean @default(false)

   @@index([receiverId])
   @@index([updatedAt])
}
