// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  Posts            Posts[]
  FavouredPosts    FavouredPosts[]
  SentMessages     Messages[]      @relation("SentMessages")
  ReceivedMessages Messages[]      @relation("ReceivedMessages")

  @@index([name])
}

// enum PostType {
//   rent
//   sell
// }

// enum PropertyType {
//   apartment
//   house
// }

//sqlite prisma limitation - should be enums for other DBs. Also id should be Big Int for Dbs other then sqlite

model Posts {
  id            Int                 @id @default(autoincrement())
  userId        String
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  title         String
  price         Int
  address       String
  description   String
  type          String
  property      String
  city          String
  area          Int
  kitchen       Int
  floor         Int
  year          Int
  FavouredPosts FavouredPosts[]
  lat           Decimal?
  lon           Decimal?
  Categories    CategoriesOnPosts[]

  @@index([city])
  @@index([area])
  @@index([price])
}

model Category {
  id    Int                 @id @default(autoincrement())
  name  String
  posts CategoriesOnPosts[]  
}

model CategoriesOnPosts {
  post       Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  @@id([postId, categoryId])
}

model FavouredPosts {
  id     String @id @default(cuid())
  userId String
  postId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post   Posts  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model Messages {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorId   String
  author     User     @relation("SentMessages", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content    String
  watched    Boolean  @default(false)
  hidden     Boolean  @default(false)

  @@index([receiverId])
  @@index([updatedAt])
}
